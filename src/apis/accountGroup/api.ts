// tslint:disable
/* eslint-disable */
/// <reference path="./custom.d.ts" />
/**
 * 账户开放接口
 * V1.0.0版本
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import Axios, { AxiosInstance } from "axios";
import { Configuration } from "./configuration";

const BASE_PATH = "https://localhost:8080".replace(/\/+$/, "");
const axiosInstance = Axios.create({
    baseURL: BASE_PATH,
    timeout: 30000,
});
/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: AxiosInstance = axiosInstance) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AccountDTO
 */
export interface AccountDTO {
    /**
     * 创建时间
     * @type {Date}
     * @memberof AccountDTO
     */
    createTime?: Date;
    /**
     * 部门
     * @type {string}
     * @memberof AccountDTO
     */
    dept?: string;
    /**
     * (账号状态 1：正常  0：停用)
     * @type {number}
     * @memberof AccountDTO
     */
    isActive?: number;
    /**
     * 登陆名称
     * @type {string}
     * @memberof AccountDTO
     */
    loginName?: string;
    /**
     * 权限资源列表
     * @type {Array<MenuDTO>}
     * @memberof AccountDTO
     */
    menuList?: Array<MenuDTO>;
    /**
     * 所属组织ID
     * @type {number}
     * @memberof AccountDTO
     */
    orgId?: number;
    /**
     * 角色ID
     * @type {number}
     * @memberof AccountDTO
     */
    roleId?: number;
    /**
     * 角色名称
     * @type {string}
     * @memberof AccountDTO
     */
    roleName?: string;
    /**
     * 角色类型
     * @type {number}
     * @memberof AccountDTO
     */
    roleType?: number;
    /**
     * 终端名称
     * @type {string}
     * @memberof AccountDTO
     */
    terminalName?: string;
    /**
     * 终端编号
     * @type {string}
     * @memberof AccountDTO
     */
    terminalNo?: string;
    /**
     * 用户ID
     * @type {number}
     * @memberof AccountDTO
     */
    userId?: number;
    /**
     * 成员姓名
     * @type {string}
     * @memberof AccountDTO
     */
    userName?: string;
    /**
     * 成员编号
     * @type {string}
     * @memberof AccountDTO
     */
    userNo?: string;
}

/**
 * 
 * @export
 * @interface AccountParams
 */
export interface AccountParams {
    /**
     * 所属部门
     * @type {string}
     * @memberof AccountParams
     */
    dept?: string;
    /**
     * 停用/恢复  1：正常  0：停用
     * @type {number}
     * @memberof AccountParams
     */
    isActive?: number;
    /**
     * 登陆名
     * @type {string}
     * @memberof AccountParams
     */
    loginName?: string;
    /**
     * 所属商铺/渠道ID
     * @type {number}
     * @memberof AccountParams
     */
    orgId?: number;
    /**
     * 如需分页传递,页码
     * @type {number}
     * @memberof AccountParams
     */
    pageNo?: number;
    /**
     * 如需分页传递，显示条数
     * @type {number}
     * @memberof AccountParams
     */
    pageSize?: number;
    /**
     * 密码
     * @type {string}
     * @memberof AccountParams
     */
    passWord?: string;
    /**
     * 角色ID
     * @type {number}
     * @memberof AccountParams
     */
    roleId?: number;
    /**
     * 角色类型
     * @type {number}
     * @memberof AccountParams
     */
    roleType?: number;
    /**
     * 终端名称
     * @type {string}
     * @memberof AccountParams
     */
    terminalName?: string;
    /**
     * 终端编号
     * @type {string}
     * @memberof AccountParams
     */
    terminalNo?: string;
    /**
     * 用户ID
     * @type {number}
     * @memberof AccountParams
     */
    userId?: number;
    /**
     * 成员姓名
     * @type {string}
     * @memberof AccountParams
     */
    userName?: string;
}

/**
 * 
 * @export
 * @interface BaseResponse
 */
export interface BaseResponse {
    /**
     * 
     * @type {number}
     * @memberof BaseResponse
     */
    code?: number;
    /**
     * 
     * @type {any}
     * @memberof BaseResponse
     */
    data?: any;
    /**
     * 
     * @type {string}
     * @memberof BaseResponse
     */
    message?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BaseResponse
     */
    success?: boolean;
}

/**
 * 
 * @export
 * @interface BaseResponseAccountDTO
 */
export interface BaseResponseAccountDTO {
    /**
     * 
     * @type {number}
     * @memberof BaseResponseAccountDTO
     */
    code?: number;
    /**
     * 
     * @type {AccountDTO}
     * @memberof BaseResponseAccountDTO
     */
    data?: AccountDTO;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseAccountDTO
     */
    message?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BaseResponseAccountDTO
     */
    success?: boolean;
}

/**
 * 
 * @export
 * @interface BaseResponseListMap
 */
export interface BaseResponseListMap {
    /**
     * 
     * @type {number}
     * @memberof BaseResponseListMap
     */
    code?: number;
    /**
     * 
     * @type {Array<any>}
     * @memberof BaseResponseListMap
     */
    data?: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof BaseResponseListMap
     */
    message?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BaseResponseListMap
     */
    success?: boolean;
}

/**
 * 
 * @export
 * @interface BaseResponsePageListAccountDTO
 */
export interface BaseResponsePageListAccountDTO {
    /**
     * 
     * @type {number}
     * @memberof BaseResponsePageListAccountDTO
     */
    code?: number;
    /**
     * 
     * @type {PageListAccountDTO}
     * @memberof BaseResponsePageListAccountDTO
     */
    data?: PageListAccountDTO;
    /**
     * 
     * @type {string}
     * @memberof BaseResponsePageListAccountDTO
     */
    message?: string;
    /**
     * 
     * @type {boolean}
     * @memberof BaseResponsePageListAccountDTO
     */
    success?: boolean;
}

/**
 * 
 * @export
 * @interface LoginUserParam
 */
export interface LoginUserParam {
    /**
     * 用户名
     * @type {string}
     * @memberof LoginUserParam
     */
    loginName?: string;
    /**
     * 密码
     * @type {string}
     * @memberof LoginUserParam
     */
    password?: string;
}

/**
 * 
 * @export
 * @interface MenuDTO
 */
export interface MenuDTO {
    /**
     * 创建时间
     * @type {Date}
     * @memberof MenuDTO
     */
    createTime?: Date;
    /**
     * 图标
     * @type {string}
     * @memberof MenuDTO
     */
    icon?: string;
    /**
     * 是否删除 1删除 0未删除
     * @type {number}
     * @memberof MenuDTO
     */
    isDel?: number;
    /**
     * 菜单URL
     * @type {string}
     * @memberof MenuDTO
     */
    linkUrl?: string;
    /**
     * 菜单ID
     * @type {number}
     * @memberof MenuDTO
     */
    menuId?: number;
    /**
     * 排序
     * @type {number}
     * @memberof MenuDTO
     */
    orderNum?: number;
    /**
     * 父菜单ID，一级菜单为0
     * @type {number}
     * @memberof MenuDTO
     */
    parentId?: number;
    /**
     * 描述
     * @type {string}
     * @memberof MenuDTO
     */
    permDescription?: string;
    /**
     * 菜单名称
     * @type {string}
     * @memberof MenuDTO
     */
    permName?: string;
    /**
     * 授权(多个用逗号分隔，如：user:list,user:create)
     * @type {string}
     * @memberof MenuDTO
     */
    perms?: string;
    /**
     * 类型   0：目录   1：菜单   2：按钮
     * @type {number}
     * @memberof MenuDTO
     */
    type?: number;
    /**
     * 更新时间
     * @type {Date}
     * @memberof MenuDTO
     */
    updateTime?: Date;
    /**
     * 版本号
     * @type {number}
     * @memberof MenuDTO
     */
    version?: number;
}

/**
 * 
 * @export
 * @interface ModelMap
 */
export interface ModelMap {
}

/**
 * 
 * @export
 * @interface PageListAccountDTO
 */
export interface PageListAccountDTO {
    /**
     * 
     * @type {Array<AccountDTO>}
     * @memberof PageListAccountDTO
     */
    list?: Array<AccountDTO>;
    /**
     * 
     * @type {number}
     * @memberof PageListAccountDTO
     */
    total?: number;
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 停用/恢复
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUserUsingPOST(accountParams: AccountParams, options: any = {}): FetchArgs {
            // verify required parameter 'accountParams' is not null or undefined
            if (accountParams === null || accountParams === undefined) {
                throw new RequiredError('accountParams', 'Required parameter accountParams was null or undefined when calling blockUserUsingPOST.');
            }
            const localVarPath = `/ppc/account/v1/blockUser`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountParams" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(accountParams || {}) : (accountParams || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除账号
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountUsingPOST(accountParams: AccountParams, options: any = {}): FetchArgs {
            // verify required parameter 'accountParams' is not null or undefined
            if (accountParams === null || accountParams === undefined) {
                throw new RequiredError('accountParams', 'Required parameter accountParams was null or undefined when calling deleteAccountUsingPOST.');
            }
            const localVarPath = `/ppc/account/v1/deleteAccount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountParams" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(accountParams || {}) : (accountParams || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 编辑用户信息
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editAccountInfoUsingPOST(accountParams: AccountParams, options: any = {}): FetchArgs {
            // verify required parameter 'accountParams' is not null or undefined
            if (accountParams === null || accountParams === undefined) {
                throw new RequiredError('accountParams', 'Required parameter accountParams was null or undefined when calling editAccountInfoUsingPOST.');
            }
            const localVarPath = `/ppc/account/v1/editAccountInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountParams" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(accountParams || {}) : (accountParams || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据TOKEN获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountByTokenUsingPOST(options: any = {}): FetchArgs {
            const localVarPath = `/ppc/account/v1/getAccountByToken`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfoUsingPOST(accountParams: AccountParams, options: any = {}): FetchArgs {
            // verify required parameter 'accountParams' is not null or undefined
            if (accountParams === null || accountParams === undefined) {
                throw new RequiredError('accountParams', 'Required parameter accountParams was null or undefined when calling getAccountInfoUsingPOST.');
            }
            const localVarPath = `/ppc/account/v1/getAccountInfo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountParams" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(accountParams || {}) : (accountParams || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取用户列表
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingPOST(accountParams: AccountParams, options: any = {}): FetchArgs {
            // verify required parameter 'accountParams' is not null or undefined
            if (accountParams === null || accountParams === undefined) {
                throw new RequiredError('accountParams', 'Required parameter accountParams was null or undefined when calling getAccountUsingPOST.');
            }
            const localVarPath = `/ppc/account/v1/getAccountListPage`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountParams" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(accountParams || {}) : (accountParams || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取商户列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgInfoListUsingGET(options: any = {}): FetchArgs {
            const localVarPath = `/ppc/account/v1/getOrgInfoList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary pageAccount
         * @param {string} [name] 姓名
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageAccountUsingGET(name?: string, pageNo?: number, pageSize?: number, options: any = {}): FetchArgs {
            const localVarPath = `/ppc/account/v1/pageAccount`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 新增账号
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST(accountParams: AccountParams, options: any = {}): FetchArgs {
            // verify required parameter 'accountParams' is not null or undefined
            if (accountParams === null || accountParams === undefined) {
                throw new RequiredError('accountParams', 'Required parameter accountParams was null or undefined when calling saveUsingPOST.');
            }
            const localVarPath = `/ppc/account/v1/savePerson`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AccountParams" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(accountParams || {}) : (accountParams || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 后台登陆接口
         * @param {LoginUserParam} loginUserParam loginUserParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLoginUsingPOST(loginUserParam: LoginUserParam, options: any = {}): FetchArgs {
            // verify required parameter 'loginUserParam' is not null or undefined
            if (loginUserParam === null || loginUserParam === undefined) {
                throw new RequiredError('loginUserParam', 'Required parameter loginUserParam was null or undefined when calling webLoginUsingPOST.');
            }
            const localVarPath = `/ppc/account/v1/webLogin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LoginUserParam" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(loginUserParam || {}) : (loginUserParam || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 停用/恢复
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUserUsingPOST(accountParams: AccountParams, options?: any): (fetch?: AxiosInstance, basePath?: string) => Promise<BaseResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).blockUserUsingPOST(accountParams, options);
            return (fetch: AxiosInstance = axiosInstance, basePath: string = BASE_PATH) => {
                const params = {
                    //...configuration.requestConfig,
                    method: localVarFetchArgs.options.method,
                    url: basePath + localVarFetchArgs.url,
                    headers: localVarFetchArgs.options.headers,
                    data: localVarFetchArgs.options.body,
                };
                return fetch(basePath + localVarFetchArgs.url, params).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.data;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 删除账号
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountUsingPOST(accountParams: AccountParams, options?: any): (fetch?: AxiosInstance, basePath?: string) => Promise<BaseResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).deleteAccountUsingPOST(accountParams, options);
            return (fetch: AxiosInstance = axiosInstance, basePath: string = BASE_PATH) => {
                const params = {
                    //...configuration.requestConfig,
                    method: localVarFetchArgs.options.method,
                    url: basePath + localVarFetchArgs.url,
                    headers: localVarFetchArgs.options.headers,
                    data: localVarFetchArgs.options.body,
                };
                return fetch(basePath + localVarFetchArgs.url, params).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.data;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 编辑用户信息
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editAccountInfoUsingPOST(accountParams: AccountParams, options?: any): (fetch?: AxiosInstance, basePath?: string) => Promise<BaseResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).editAccountInfoUsingPOST(accountParams, options);
            return (fetch: AxiosInstance = axiosInstance, basePath: string = BASE_PATH) => {
                const params = {
                    //...configuration.requestConfig,
                    method: localVarFetchArgs.options.method,
                    url: basePath + localVarFetchArgs.url,
                    headers: localVarFetchArgs.options.headers,
                    data: localVarFetchArgs.options.body,
                };
                return fetch(basePath + localVarFetchArgs.url, params).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.data;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 根据TOKEN获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountByTokenUsingPOST(options?: any): (fetch?: AxiosInstance, basePath?: string) => Promise<BaseResponseAccountDTO> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getAccountByTokenUsingPOST(options);
            return (fetch: AxiosInstance = axiosInstance, basePath: string = BASE_PATH) => {
                const params = {
                    //...configuration.requestConfig,
                    method: localVarFetchArgs.options.method,
                    url: basePath + localVarFetchArgs.url,
                    headers: localVarFetchArgs.options.headers,
                    data: localVarFetchArgs.options.body,
                };
                return fetch(basePath + localVarFetchArgs.url, params).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.data;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfoUsingPOST(accountParams: AccountParams, options?: any): (fetch?: AxiosInstance, basePath?: string) => Promise<BaseResponseAccountDTO> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getAccountInfoUsingPOST(accountParams, options);
            return (fetch: AxiosInstance = axiosInstance, basePath: string = BASE_PATH) => {
                const params = {
                    //...configuration.requestConfig,
                    method: localVarFetchArgs.options.method,
                    url: basePath + localVarFetchArgs.url,
                    headers: localVarFetchArgs.options.headers,
                    data: localVarFetchArgs.options.body,
                };
                return fetch(basePath + localVarFetchArgs.url, params).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.data;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取用户列表
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingPOST(accountParams: AccountParams, options?: any): (fetch?: AxiosInstance, basePath?: string) => Promise<BaseResponsePageListAccountDTO> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getAccountUsingPOST(accountParams, options);
            return (fetch: AxiosInstance = axiosInstance, basePath: string = BASE_PATH) => {
                const params = {
                    //...configuration.requestConfig,
                    method: localVarFetchArgs.options.method,
                    url: basePath + localVarFetchArgs.url,
                    headers: localVarFetchArgs.options.headers,
                    data: localVarFetchArgs.options.body,
                };
                return fetch(basePath + localVarFetchArgs.url, params).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.data;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 获取商户列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgInfoListUsingGET(options?: any): (fetch?: AxiosInstance, basePath?: string) => Promise<BaseResponseListMap> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getOrgInfoListUsingGET(options);
            return (fetch: AxiosInstance = axiosInstance, basePath: string = BASE_PATH) => {
                const params = {
                    //...configuration.requestConfig,
                    method: localVarFetchArgs.options.method,
                    url: basePath + localVarFetchArgs.url,
                    headers: localVarFetchArgs.options.headers,
                    data: localVarFetchArgs.options.body,
                };
                return fetch(basePath + localVarFetchArgs.url, params).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.data;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary pageAccount
         * @param {string} [name] 姓名
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageAccountUsingGET(name?: string, pageNo?: number, pageSize?: number, options?: any): (fetch?: AxiosInstance, basePath?: string) => Promise<BaseResponsePageListAccountDTO> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).pageAccountUsingGET(name, pageNo, pageSize, options);
            return (fetch: AxiosInstance = axiosInstance, basePath: string = BASE_PATH) => {
                const params = {
                    //...configuration.requestConfig,
                    method: localVarFetchArgs.options.method,
                    url: basePath + localVarFetchArgs.url,
                    headers: localVarFetchArgs.options.headers,
                    data: localVarFetchArgs.options.body,
                };
                return fetch(basePath + localVarFetchArgs.url, params).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.data;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 新增账号
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST(accountParams: AccountParams, options?: any): (fetch?: AxiosInstance, basePath?: string) => Promise<BaseResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).saveUsingPOST(accountParams, options);
            return (fetch: AxiosInstance = axiosInstance, basePath: string = BASE_PATH) => {
                const params = {
                    //...configuration.requestConfig,
                    method: localVarFetchArgs.options.method,
                    url: basePath + localVarFetchArgs.url,
                    headers: localVarFetchArgs.options.headers,
                    data: localVarFetchArgs.options.body,
                };
                return fetch(basePath + localVarFetchArgs.url, params).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.data;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary 后台登陆接口
         * @param {LoginUserParam} loginUserParam loginUserParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLoginUsingPOST(loginUserParam: LoginUserParam, options?: any): (fetch?: AxiosInstance, basePath?: string) => Promise<BaseResponse> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).webLoginUsingPOST(loginUserParam, options);
            return (fetch: AxiosInstance = axiosInstance, basePath: string = BASE_PATH) => {
                const params = {
                    //...configuration.requestConfig,
                    method: localVarFetchArgs.options.method,
                    url: basePath + localVarFetchArgs.url,
                    headers: localVarFetchArgs.options.headers,
                    data: localVarFetchArgs.options.body,
                };
                return fetch(basePath + localVarFetchArgs.url, params).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.data;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: AxiosInstance, basePath?: string) {
    return {
        /**
         * 
         * @summary 停用/恢复
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blockUserUsingPOST(accountParams: AccountParams, options?: any) {
            return DefaultApiFp(configuration).blockUserUsingPOST(accountParams, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 删除账号
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountUsingPOST(accountParams: AccountParams, options?: any) {
            return DefaultApiFp(configuration).deleteAccountUsingPOST(accountParams, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 编辑用户信息
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editAccountInfoUsingPOST(accountParams: AccountParams, options?: any) {
            return DefaultApiFp(configuration).editAccountInfoUsingPOST(accountParams, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 根据TOKEN获取用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountByTokenUsingPOST(options?: any) {
            return DefaultApiFp(configuration).getAccountByTokenUsingPOST(options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户信息
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountInfoUsingPOST(accountParams: AccountParams, options?: any) {
            return DefaultApiFp(configuration).getAccountInfoUsingPOST(accountParams, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取用户列表
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccountUsingPOST(accountParams: AccountParams, options?: any) {
            return DefaultApiFp(configuration).getAccountUsingPOST(accountParams, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 获取商户列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrgInfoListUsingGET(options?: any) {
            return DefaultApiFp(configuration).getOrgInfoListUsingGET(options)(fetch, basePath);
        },
        /**
         * 
         * @summary pageAccount
         * @param {string} [name] 姓名
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pageAccountUsingGET(name?: string, pageNo?: number, pageSize?: number, options?: any) {
            return DefaultApiFp(configuration).pageAccountUsingGET(name, pageNo, pageSize, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 新增账号
         * @param {AccountParams} accountParams accountParams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveUsingPOST(accountParams: AccountParams, options?: any) {
            return DefaultApiFp(configuration).saveUsingPOST(accountParams, options)(fetch, basePath);
        },
        /**
         * 
         * @summary 后台登陆接口
         * @param {LoginUserParam} loginUserParam loginUserParam
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webLoginUsingPOST(loginUserParam: LoginUserParam, options?: any) {
            return DefaultApiFp(configuration).webLoginUsingPOST(loginUserParam, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 停用/恢复
     * @param {AccountParams} accountParams accountParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public blockUserUsingPOST(accountParams: AccountParams, options?: any) {
        return DefaultApiFp(this.configuration).blockUserUsingPOST(accountParams, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 删除账号
     * @param {AccountParams} accountParams accountParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAccountUsingPOST(accountParams: AccountParams, options?: any) {
        return DefaultApiFp(this.configuration).deleteAccountUsingPOST(accountParams, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 编辑用户信息
     * @param {AccountParams} accountParams accountParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editAccountInfoUsingPOST(accountParams: AccountParams, options?: any) {
        return DefaultApiFp(this.configuration).editAccountInfoUsingPOST(accountParams, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 根据TOKEN获取用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAccountByTokenUsingPOST(options?: any) {
        return DefaultApiFp(this.configuration).getAccountByTokenUsingPOST(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户信息
     * @param {AccountParams} accountParams accountParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAccountInfoUsingPOST(accountParams: AccountParams, options?: any) {
        return DefaultApiFp(this.configuration).getAccountInfoUsingPOST(accountParams, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取用户列表
     * @param {AccountParams} accountParams accountParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAccountUsingPOST(accountParams: AccountParams, options?: any) {
        return DefaultApiFp(this.configuration).getAccountUsingPOST(accountParams, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 获取商户列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOrgInfoListUsingGET(options?: any) {
        return DefaultApiFp(this.configuration).getOrgInfoListUsingGET(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary pageAccount
     * @param {string} [name] 姓名
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pageAccountUsingGET(name?: string, pageNo?: number, pageSize?: number, options?: any) {
        return DefaultApiFp(this.configuration).pageAccountUsingGET(name, pageNo, pageSize, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 新增账号
     * @param {AccountParams} accountParams accountParams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public saveUsingPOST(accountParams: AccountParams, options?: any) {
        return DefaultApiFp(this.configuration).saveUsingPOST(accountParams, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary 后台登陆接口
     * @param {LoginUserParam} loginUserParam loginUserParam
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public webLoginUsingPOST(loginUserParam: LoginUserParam, options?: any) {
        return DefaultApiFp(this.configuration).webLoginUsingPOST(loginUserParam, options)(this.fetch, this.basePath);
    }

}

